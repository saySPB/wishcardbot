#–§–∞–π–ª `main.py` —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥. –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞, –≤–ª–∏—è—é—â–∞—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, ‚Äî —ç—Ç–æ —Ü–∏–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –Ω–∞—Ö–æ–¥—è—â–∏–π—Å—è *–≤–Ω—É—Ç—Ä–∏* –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ `handle_message`.
import telebot
from telebot import types
import time
import json
import os

from utils import bot, save_user_data
from wish_functions import add_wish_start, edit_wish_start, delete_wish_start, view_wishes_start
from category_functions import manage_categories_start 
#from photo_functions import *
#from wish_functions import *


try:
    with open("user_data.json", "r") as f:
        user_data = json.load(f)
except FileNotFoundError:
    user_data = {}


@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = ["‚ú® –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ", "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ", "‚ùå –£–¥–∞–ª–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ", "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∂–µ–ª–∞–Ω–∏—è", "üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"]
    markup.add(*[types.KeyboardButton(text) for text in buttons])

    user_id = str(message.chat.id)
    if user_id not in user_data:
        user_data[user_id] = {"categories": {}, "last_interaction": time.time()}
    else:
        user_data[user_id]["last_interaction"] = time.time()
    save_user_data()

    bot.send_message(message.chat.id, "üåü –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π! ‚ú®\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global user_data
    user_id = str(message.chat.id) # –ø–æ–ª—É—á–∞–µ–º user_id

    if user_id not in user_data: # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_data[user_id] = {"categories": {}}

    if message.text == "‚ú® –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ":
        add_wish_start(message, bot)
    elif message.text == "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ":
        edit_wish_start(message, bot, user_data)
    elif message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ":
        delete_wish_start(message, bot, user_data)
    elif message.text == "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∂–µ–ª–∞–Ω–∏—è":
        user_id = str(message.chat.id)
        categories = list(user_data[user_id]["categories"].keys())
        if categories:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(*[types.KeyboardButton(cat) for cat in categories])
            markup.add(types.KeyboardButton("–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")) # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
            bot.register_next_step_handler(message, lambda msg: view_wishes_start(msg, bot, user_data))
        else:
            bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–æ–∑–¥–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é 'üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏'.")

    elif message.text == "üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏":
        manage_categories_start(message, bot, user_data)

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    markup = telebot.types.InlineKeyboardMarkup()
    add_button = telebot.types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å", callback_data="add")
    delete_button = telebot.types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data="delete")
    edit_button = telebot.types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit")
    markup.row(add_button, delete_button, edit_button)

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(state="waiting_for_category_name") # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
def handle_new_category_name(message):
    chat_id = message.chat.id
    category_name = message.text
    # ... (–≤–∞—à –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∏–º–µ–Ω–µ–º category_name)
    bot.send_message(chat_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —Å–æ–∑–¥–∞–Ω–∞!")
    bot.delete_state(chat_id, chat_id) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id = call.message.chat.id
    if call.data == "add_category": # –ò–∑–º–µ–Ω–µ–Ω–æ: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å"
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º chat_id, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        bot.set_state(chat_id, "waiting_for_category_name", chat_id) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    elif call.data == "delete":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        bot.send_message(chat_id, "–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –£–¥–∞–ª–∏—Ç—å!")
    elif call.data == "edit":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        bot.send_message(chat_id, "–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å!")

# --- –¶–∏–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---

    while True:
        current_time = time.time()
        for user_id, data in user_data.items():
            if current_time - data.get("last_interaction", 0) >= 24 * 60 * 60: # 24 —á–∞—Å–∞
                bot.send_message(int(user_id), "üëã –ü—Ä–∏–≤–µ—Ç! –ù–µ –∑–∞–±—ã–≤–∞–π –æ —Å–≤–æ–∏—Ö –º–µ—á—Ç–∞—Ö! ‚ú® –ó–∞–≥–ª—è–Ω–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è. üòâ")
                data["last_interaction"] = current_time
                save_user_data()
        time.sleep(60 * 60) # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å


bot.infinity_polling()

