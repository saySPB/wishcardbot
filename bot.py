import telebot
from telebot import types
import datetime
import time
import json
from PIL import Image
import os

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
bot = telebot.TeleBot('7570956742:AAE3NLprO8RO96hfVTpnmE3UqQZRWlK3XH8')

user_data = {}

try:
    with open("user_data.json", "r") as f:
        user_data = json.load(f)
except FileNotFoundError:
    pass

async def save_user_data():
    with open("user_data.json", "w") as f:
        json.dump(user_data, f)

async def get_wish_list(user_id, category=None):
    # ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ get_wish_list)

async def add_wish(user_id, wish, category, deadline=None, image=None):
    # ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ add_wish)

async def edit_wish(user_id, category, wish_index, new_wish, new_deadline=None, new_image=None):
    # ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ edit_wish)

async def delete_wish(user_id, category, wish_index):
    # ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ delete_wish)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@bot.message_handler(commands=['start'])
async def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = ["‚ú® –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ", "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ", "‚ùå –£–¥–∞–ª–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ", "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∂–µ–ª–∞–Ω–∏—è", "üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"]
    markup.add(*[types.KeyboardButton(text) for text in buttons])

    user_id = str(message.chat.id)
    if user_id not in user_data:
        user_data[user_id] = {"categories": {}, "last_interaction": time.time()}
    else:
        user_data[user_id]["last_interaction"] = time.time()
    save_user_data()

    bot.send_message(message.chat.id, "üåü –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π! ‚ú®\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: True)
async def handle_message(message):
    user_id = str(message.chat.id)
    user_data.setdefault(user_id, {"categories": {}, "last_interaction": time.time()})
    user_data[user_id]["last_interaction"] = time.time()
    save_user_data()

    if message.text == "‚ú® –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ":
        bot.send_message(message.chat.id, "–í –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ? (–ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–π –µ–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é 'üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏')")
        bot.register_next_step_handler(message, add_wish_category_handler)

    elif message.text == "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ":
        categories = list(user_data[user_id]["categories"].keys())
        if categories:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(*[types.KeyboardButton(cat) for cat in categories])
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
            bot.register_next_step_handler(message, edit_wish_category_handler)
        else:
            bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–æ–∑–¥–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é 'üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏'.")

    elif message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ":
        # ... (–ª–æ–≥–∏–∫–∞, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é, –Ω–æ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º) - —Å–º. –Ω–∏–∂–µ

    elif message.text == "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∂–µ–ª–∞–Ω–∏—è":
        categories = list(user_data[user_id]["categories"].keys())
        if categories:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(*[types.KeyboardButton(cat) for cat in categories + ["–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"]]) # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
            bot.register_next_step_handler(message, view_wishes_category_handler)
        else:
            bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–æ–∑–¥–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é 'üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏'.")

    elif message.text == "üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(types.KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"), types.KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"), types.KeyboardButton("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"), types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
        bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, manage_categories_handler)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π ---
async def add_wish_category_handler(message):
    user_id = str(message.chat.id)
    category = message.text
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ:")
    bot.register_next_step_handler(message, lambda msg: add_wish_text_handler(msg, user_id, category))

async def add_wish_text_handler(message, user_id, category):
    wish_text = message.text
    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):")
    bot.register_next_step_handler(message, lambda msg: add_wish_deadline_handler(msg, user_id, category, wish_text))

async def add_wish_deadline_handler(message, user_id, category, wish_text):
    deadline = message.text
    if deadline.lower() == "–Ω–µ—Ç" or deadline == "" or deadline.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        deadline = None
    add_wish(user_id, wish_text, category, deadline) # –î–æ–±–∞–≤–ª—è–µ–º deadline
    bot.send_message(message.chat.id, f"–ñ–µ–ª–∞–Ω–∏–µ '{wish_text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'!")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π ---
async def edit_wish_category_handler(message):
    user_id = str(message.chat.id)
    category = message.text
    wishes = get_wish_list(user_id, category)
    if wishes:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i, wish_data in enumerate(wishes):
            markup.add(types.KeyboardButton(f"{i+1}. {wish_data['wish']}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∂–µ–ª–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, lambda msg: edit_wish_select_handler(msg, user_id, category))
    else:
        bot.send_message(message.chat.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏–π.")

async def edit_wish_select_handler(message, user_id, category):
    try:
        wish_index = int(message.text.split(".")[0]) - 1
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∂–µ–ª–∞–Ω–∏—è:")
        bot.register_next_step_handler(message, lambda msg: edit_wish_text_handler(msg, user_id, category, wish_index))
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∂–µ–ª–∞–Ω–∏—è.")

async def edit_wish_text_handler(message, user_id, category, wish_index):
    new_wish_text = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–∏–π):")
    bot.register_next_step_handler(message, lambda msg: edit_wish_deadline_handler(msg, user_id, category, wish_index, new_wish_text))

async def edit_wish_deadline_handler(message, user_id, category, wish_index, new_wish_text):
    new_deadline = message.text
    if new_deadline.lower() == "–Ω–µ—Ç" or new_deadline == "" or new_deadline.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        new_deadline = None # –ò–ª–∏ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —Å—Ç–∞—Ä—ã–π –¥–µ–¥–ª–∞–π–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    if edit_wish(user_id, category, wish_index, new_wish_text, new_deadline):
        bot.send_message(message.chat.id, "–ñ–µ–ª–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ.")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π ---
# ... (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é, –Ω–æ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–µ–ª–∞–Ω–∏–π ---
async def view_wishes_category_handler(message):
    user_id = str(message.chat.id)
    chosen_category = message.text
    if chosen_category == "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
        wishes = get_wish_list(user_id)
    else:
        wishes = get_wish_list(user_id, chosen_category)

    if wishes:
        response = ""
        for i, wish_data in enumerate(wishes):
            response += f"{i+1}. {wish_data['wish']}"
            if wish_data['deadline']:
                response += f" (–î–µ–¥–ª–∞–π–Ω: {wish_data['deadline']})"
            response += "\n"
        bot.send_message(message.chat.id, response if response else "–ñ–µ–ª–∞–Ω–∏–π –Ω–µ—Ç.")
    else:
        bot.send_message(message.chat.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏–π." if chosen_category != "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" else "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏–π.")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ ---
async def manage_categories_handler(message):
    user_id = str(message.chat.id)
    if message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        bot.register_next_step_handler(message, create_category_handler)

    elif message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
         # ... (–ª–æ–≥–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)

    elif message.text == "‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
         # ... (–ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)

    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        start_message(message) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é

async def create_category_handler(message):
    user_id = str(message.chat.id)
    category_name = message.text
    user_data.setdefault(user_id, {"categories": {}})
    if category_name not in user_data[user_id]["categories"]:
        user_data[user_id]["categories"][category_name] = []
        save_user_data()
        bot.send_message(message.chat.id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —Å–æ–∑–¥–∞–Ω–∞!")
    else:
        bot.send_message(message.chat.id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ handle_photo, —Ü–∏–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π)
# ... (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Éasync –¥–∞–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π)

bot.polling()